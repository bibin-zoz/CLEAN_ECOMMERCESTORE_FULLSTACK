// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\usecase\interface\user.go

// Package mock is a generated GoMock package.
package mock

import (
	
    models "cleancode/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
	
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}
// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(userID int, address models.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), userID, address)
}

// ApplyReferral mocks base method.
func (m *MockUserUseCase) ApplyReferral(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyReferral", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyReferral indicates an expected call of ApplyReferral.
func (mr *MockUserUseCaseMockRecorder) ApplyReferral(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyReferral", reflect.TypeOf((*MockUserUseCase)(nil).ApplyReferral), userID)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(id int, old, password, repassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, old, password, repassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(id, old, password, repassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), id, old, password, repassword)
}

// DeleteAddress mocks base method.
func (m *MockUserUseCase) DeleteAddress(addressID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", addressID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserUseCaseMockRecorder) DeleteAddress(addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserUseCase)(nil).DeleteAddress), addressID, userID)
}

// ForgotPasswordSend mocks base method.
func (m *MockUserUseCase) ForgotPasswordSend(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordSend", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPasswordSend indicates an expected call of ForgotPasswordSend.
func (mr *MockUserUseCaseMockRecorder) ForgotPasswordSend(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordSend", reflect.TypeOf((*MockUserUseCase)(nil).ForgotPasswordSend), phone)
}

