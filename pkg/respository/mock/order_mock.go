// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\respository\interfaces\user.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "cleancode/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(userID int, address entity.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), userID, address)
}

// CheckExistingEmail mocks base method.
func (m *MockUserRepository) CheckExistingEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingEmail indicates an expected call of CheckExistingEmail.
func (mr *MockUserRepositoryMockRecorder) CheckExistingEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckExistingEmail), email)
}

// CheckExistingNumber mocks base method.
func (m *MockUserRepository) CheckExistingNumber(number string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingNumber", number)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingNumber indicates an expected call of CheckExistingNumber.
func (mr *MockUserRepositoryMockRecorder) CheckExistingNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingNumber", reflect.TypeOf((*MockUserRepository)(nil).CheckExistingNumber), number)
}

// CheckExistingUsername mocks base method.
func (m *MockUserRepository) CheckExistingUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingUsername indicates an expected call of CheckExistingUsername.
func (mr *MockUserRepositoryMockRecorder) CheckExistingUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingUsername", reflect.TypeOf((*MockUserRepository)(nil).CheckExistingUsername), username)
}

// FetchUser mocks base method.
func (m *MockUserRepository) FetchUser(Newmail string) (entity.Compare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", Newmail)
	ret0, _ := ret[0].(entity.Compare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockUserRepositoryMockRecorder) FetchUser(Newmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockUserRepository)(nil).FetchUser), Newmail)
}

// GetAllAddress mocks base method.
func (m *MockUserRepository) GetAllAddress(userId int) ([]entity.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userId)
	ret0, _ := ret[0].([]entity.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserRepositoryMockRecorder) GetAllAddress(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddress), userId)
}

// UserDetails mocks base method.
func (m *MockUserRepository) UserDetails(userID int) (entity.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(entity.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserRepositoryMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserRepository)(nil).UserDetails), userID)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(user entity.UserSignUp) (entity.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(entity.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), user)
}
